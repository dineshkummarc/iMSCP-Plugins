#!/usr/bin/env perl

=head1 NAME

 configure-managesieve.pl - Configure or deconfigure the Roundcube managesieve plugin

=head1 SYNOPSIS

 perl configure-managesieve.pl configure|deconfigure

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2019 Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../../../../../engine/PerlLib", "$FindBin::Bin/../../../../../engine/PerlVendor";
use File::Basename 'basename';
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ debug error getMessageByType newDebug setDebug setVerbose /;
use iMSCP::Dir;
use iMSCP::Execute 'executeNoWait';
use iMSCP::File;
use iMSCP::Getopt;
use POSIX 'locale_h';
use Servers::po;

=head1 PUBLIC FUNCTIONS

=over 4

=item configure( )

 Configure the plugin

 Return void, die on failure

=cut

sub configure
{
    my $stderr = '';
    executeNoWait(
        [ 'apt-get', 'update' ], \&_std, sub { $stderr .= $_[0] }
    ) == 0 or die( $stderr || 'Unknown error' );
    executeNoWait(
        [
            '/usr/bin/apt-get',
            '-o', 'DPkg::Options::=--force-confnew',
            '-o', 'DPkg::Options::=--force-confmiss',
            '--assume-yes',
            '--auto-remove',
            '--no-install-recommends',
            '--purge',
            '--quiet',
            'install',
            'dovecot-sieve', 'dovecot-managesieved'
        ],
        \&_std,
        sub { $stderr .= $_[0] }
    ) == 0 or die( $stderr || 'Unknown error' );

    my $server = Servers::po->factory();
    my $file = iMSCP::File->new(
        filename => "$server->{'config'}->{'DOVECOT_CONF_DIR'}/imscp.d/imscp_managesieve.conf"
    );
    $file->set( <<'EOT' );
# DOVECOT(1) configuration file - auto-generated by i-MSCP
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

plugin {
    sieve = file:~/sieve;active=~/.dovecot.sieve
}

protocol lda {
    mail_plugins = $mail_plugins sieve
}
EOT
    $file->save() == 0 or die( getMessageByType(
        'error', { amount => 1, remove => TRUE }
    ));
}

=item deconfigure( )

 Deconfigure the plugin

 Return void, die on failure

=cut

sub deconfigure
{
    my $server = Servers::po->factory();

    if ( -f "$server->{'config'}->{'DOVECOT_CONF_DIR'}/imscp.d/imscp_managesieve.conf" ) {
        iMSCP::File->new(
            filename => "$server->{'config'}->{'DOVECOT_CONF_DIR'}/imscp.d/imscp_managesieve.conf"
        )->delFile() == 0 or die( getMessageByType(
            'error', { amount => 1, remove => TRUE }
        ));
    }

    my $stderr = '';
    executeNoWait(
        [
            '/usr/bin/apt-get',
            '--assume-yes',
            '--auto-remove',
            '--no-install-recommends',
            '--purge',
            '--quiet',
            'remove',
            'dovecot-sieve', 'dovecot-managesieved'
        ],
        \&_std,
        sub { $stderr .= $_[0]; }
    ) == 0 or die( $stderr || 'Unknown error' );
}

=back

=head1 PRIVATE FUNCTIONS

=over 4

=item _std( )

 STD routine
 
 Return void

=cut

sub _std
{
    chomp( $_[0] );
    debug( $_[0] ) if length $_[0];
}

=back

=head1 MAIN

=over 4

=cut

eval {
    @{ENV}{qw/ DEBIAN_FRONTEND LANG PATH /} = (
        'noninteractive',
        'C.UTF-8',
        '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
    );

    setlocale( LC_MESSAGES, 'C.UTF-8' );
    setDebug( iMSCP::Getopt->debug( TRUE ));
    setVerbose( iMSCP::Getopt->verbose( TRUE ));
    newDebug( "@{ [ basename( $0, '.pl' ) ] }.log" );

    iMSCP::Bootstrapper->getInstance()->lock(
        "/var/lock/@{ [ basename( $0, '.pl' ) ] }.lock"
    );
    iMSCP::Bootstrapper->getInstance()->boot( {
        nokeys          => TRUE,
        nodatabase      => TRUE,
        config_readonly => TRUE,
        nolock          => TRUE
    } );

    my $stage = $ARGV[0] // die "Missing 'stage' argument";

    # Do not act if the dovecot service isn't available, or if $stage isn't
    # one of 'configure' or 'deconfigure'
    return unless $::imscpConfig{'PO_SERVER'} eq 'dovecot'
        && grep ( $stage eq $_, qw/ configure deconfigure / );

    my %dispatch = (
        configure   => \&configure,
        deconfigure => \&deconfigure
    );
    $dispatch{$stage}->();

    # Schedule dovecot service restart
    Servers::po->factory()->{'restart'} = TRUE;
};
if ( $@ ) {
    error( $@ );
    exit 1;
}

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
